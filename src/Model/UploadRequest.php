<?php
/**
 * UploadRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\StorageApiSdk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Restful API based on CoreAPI technology
 *
 * Add your description here
 *
 * OpenAPI spec version: 2.0.87-7
 * Contact: XXXXXXXXX@softonic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\StorageApiSdk\Model;

use \ArrayAccess;

/**
 * UploadRequest Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Softonic\StorageApiSdk
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UploadRequest implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'UploadRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id_upload_requests' => 'int',
        'id_files' => 'string',
        'status' => 'string',
        'remaining_attempts' => 'int',
        'last_upload_error_message' => 'string',
        'download_url' => 'string',
        'file_type' => 'string',
        'callback_url' => 'string',
        'filename' => 'string',
        'reliability' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id_upload_requests' => 'id_upload_requests',
        'id_files' => 'id_files',
        'status' => 'status',
        'remaining_attempts' => 'remaining_attempts',
        'last_upload_error_message' => 'last_upload_error_message',
        'download_url' => 'download_url',
        'file_type' => 'file_type',
        'callback_url' => 'callback_url',
        'filename' => 'filename',
        'reliability' => 'reliability'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id_upload_requests' => 'setIdUploadRequests',
        'id_files' => 'setIdFiles',
        'status' => 'setStatus',
        'remaining_attempts' => 'setRemainingAttempts',
        'last_upload_error_message' => 'setLastUploadErrorMessage',
        'download_url' => 'setDownloadUrl',
        'file_type' => 'setFileType',
        'callback_url' => 'setCallbackUrl',
        'filename' => 'setFilename',
        'reliability' => 'setReliability'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id_upload_requests' => 'getIdUploadRequests',
        'id_files' => 'getIdFiles',
        'status' => 'getStatus',
        'remaining_attempts' => 'getRemainingAttempts',
        'last_upload_error_message' => 'getLastUploadErrorMessage',
        'download_url' => 'getDownloadUrl',
        'file_type' => 'getFileType',
        'callback_url' => 'getCallbackUrl',
        'filename' => 'getFilename',
        'reliability' => 'getReliability'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const STATUS_QUEUED = 'queued';
    const STATUS_FETCHING = 'fetching';
    const STATUS_FETCHED = 'fetched';
    const STATUS_UPLOADING = 'uploading';
    const STATUS_UPLOADED = 'uploaded';
    const STATUS_ERROR = 'error';
    const STATUS_PARTIAL_ERROR = 'partial_error';
    const FILE_TYPE_PROGRAM = 'program';
    const FILE_TYPE_PROGRAM_ADD_NEW_CDN = 'program_add_new_cdn';
    const FILE_TYPE_PROGRAM_STAGING = 'program_staging';
    const FILE_TYPE_PROGRAM_INTEGRATION = 'program_integration';
    const FILE_TYPE_PROGRAM_DEVELOPMENT = 'program_development';
    const FILE_TYPE_IMAGES = 'images';
    const FILE_TYPE_IMAGES_STAGING = 'images_staging';
    const FILE_TYPE_IMAGES_INTEGRATION = 'images_integration';
    const FILE_TYPE_IMAGES_DEVELOPMENT = 'images_development';
    const FILE_TYPE_RPM = 'rpm';
    const FILE_TYPE_REPORT = 'report';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_QUEUED,
            self::STATUS_FETCHING,
            self::STATUS_FETCHED,
            self::STATUS_UPLOADING,
            self::STATUS_UPLOADED,
            self::STATUS_ERROR,
            self::STATUS_PARTIAL_ERROR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFileTypeAllowableValues()
    {
        return [
            self::FILE_TYPE_PROGRAM,
            self::FILE_TYPE_PROGRAM_ADD_NEW_CDN,
            self::FILE_TYPE_PROGRAM_STAGING,
            self::FILE_TYPE_PROGRAM_INTEGRATION,
            self::FILE_TYPE_PROGRAM_DEVELOPMENT,
            self::FILE_TYPE_IMAGES,
            self::FILE_TYPE_IMAGES_STAGING,
            self::FILE_TYPE_IMAGES_INTEGRATION,
            self::FILE_TYPE_IMAGES_DEVELOPMENT,
            self::FILE_TYPE_RPM,
            self::FILE_TYPE_REPORT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_upload_requests'] = isset($data['id_upload_requests']) ? $data['id_upload_requests'] : null;
        $this->container['id_files'] = isset($data['id_files']) ? $data['id_files'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['remaining_attempts'] = isset($data['remaining_attempts']) ? $data['remaining_attempts'] : null;
        $this->container['last_upload_error_message'] = isset($data['last_upload_error_message']) ? $data['last_upload_error_message'] : null;
        $this->container['download_url'] = isset($data['download_url']) ? $data['download_url'] : null;
        $this->container['file_type'] = isset($data['file_type']) ? $data['file_type'] : null;
        $this->container['callback_url'] = isset($data['callback_url']) ? $data['callback_url'] : null;
        $this->container['filename'] = isset($data['filename']) ? $data['filename'] : null;
        $this->container['reliability'] = isset($data['reliability']) ? $data['reliability'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if (!is_null($this->container['id_files']) && (strlen($this->container['id_files']) > 40)) {
            $invalid_properties[] = "invalid value for 'id_files', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['id_files']) && (strlen($this->container['id_files']) < 40)) {
            $invalid_properties[] = "invalid value for 'id_files', the character length must be bigger than or equal to 40.";
        }

        $allowed_values = array("queued", "fetching", "fetched", "uploading", "uploaded", "error", "partial_error");
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of #{allowed_values}.";
        }

        if ($this->container['download_url'] === null) {
            $invalid_properties[] = "'download_url' can't be null";
        }
        if ($this->container['file_type'] === null) {
            $invalid_properties[] = "'file_type' can't be null";
        }
        $allowed_values = array("program", "program_add_new_cdn", "program_staging", "program_integration", "program_development", "images", "images_staging", "images_integration", "images_development", "rpm", "report");
        if (!in_array($this->container['file_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'file_type', must be one of #{allowed_values}.";
        }

        if ($this->container['callback_url'] === null) {
            $invalid_properties[] = "'callback_url' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['id_files']) > 40) {
            return false;
        }
        if (strlen($this->container['id_files']) < 40) {
            return false;
        }
        $allowed_values = array("queued", "fetching", "fetched", "uploading", "uploaded", "error", "partial_error");
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        if ($this->container['download_url'] === null) {
            return false;
        }
        if ($this->container['file_type'] === null) {
            return false;
        }
        $allowed_values = array("program", "program_add_new_cdn", "program_staging", "program_integration", "program_development", "images", "images_staging", "images_integration", "images_development", "rpm", "report");
        if (!in_array($this->container['file_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['callback_url'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id_upload_requests
     * @return int
     */
    public function getIdUploadRequests()
    {
        return $this->container['id_upload_requests'];
    }

    /**
     * Sets id_upload_requests
     * @param int $id_upload_requests Upload Request ID
     * @return $this
     */
    public function setIdUploadRequests($id_upload_requests)
    {
        $this->container['id_upload_requests'] = $id_upload_requests;

        return $this;
    }

    /**
     * Gets id_files
     * @return string
     */
    public function getIdFiles()
    {
        return $this->container['id_files'];
    }

    /**
     * Sets id_files
     * @param string $id_files SHA-1 hash of the file content
     * @return $this
     */
    public function setIdFiles($id_files)
    {
        if (strlen($id_files) > 40) {
            throw new \InvalidArgumentException('invalid length for $id_files when calling UploadRequest., must be smaller than or equal to 40.');
        }
        if (strlen($id_files) < 40) {
            throw new \InvalidArgumentException('invalid length for $id_files when calling UploadRequest., must be bigger than or equal to 40.');
        }
        $this->container['id_files'] = $id_files;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Status of the upload request
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array('queued', 'fetching', 'fetched', 'uploading', 'uploaded', 'error', 'partial_error');
        if (!in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'queued', 'fetching', 'fetched', 'uploading', 'uploaded', 'error', 'partial_error'");
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets remaining_attempts
     * @return int
     */
    public function getRemainingAttempts()
    {
        return $this->container['remaining_attempts'];
    }

    /**
     * Sets remaining_attempts
     * @param int $remaining_attempts Number of remaining attempts to fetch a file from the url
     * @return $this
     */
    public function setRemainingAttempts($remaining_attempts)
    {
        $this->container['remaining_attempts'] = $remaining_attempts;

        return $this;
    }

    /**
     * Gets last_upload_error_message
     * @return string
     */
    public function getLastUploadErrorMessage()
    {
        return $this->container['last_upload_error_message'];
    }

    /**
     * Sets last_upload_error_message
     * @param string $last_upload_error_message Error message of the last upload resulting on error
     * @return $this
     */
    public function setLastUploadErrorMessage($last_upload_error_message)
    {
        $this->container['last_upload_error_message'] = $last_upload_error_message;

        return $this;
    }

    /**
     * Gets download_url
     * @return string
     */
    public function getDownloadUrl()
    {
        return $this->container['download_url'];
    }

    /**
     * Sets download_url
     * @param string $download_url Download url
     * @return $this
     */
    public function setDownloadUrl($download_url)
    {
        $this->container['download_url'] = $download_url;

        return $this;
    }

    /**
     * Gets file_type
     * @return string
     */
    public function getFileType()
    {
        return $this->container['file_type'];
    }

    /**
     * Sets file_type
     * @param string $file_type File type
     * @return $this
     */
    public function setFileType($file_type)
    {
        $allowed_values = array('program', 'program_add_new_cdn', 'program_staging', 'program_integration', 'program_development', 'images', 'images_staging', 'images_integration', 'images_development', 'rpm', 'report');
        if (!in_array($file_type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'file_type', must be one of 'program', 'program_add_new_cdn', 'program_staging', 'program_integration', 'program_development', 'images', 'images_staging', 'images_integration', 'images_development', 'rpm', 'report'");
        }
        $this->container['file_type'] = $file_type;

        return $this;
    }

    /**
     * Gets callback_url
     * @return string
     */
    public function getCallbackUrl()
    {
        return $this->container['callback_url'];
    }

    /**
     * Sets callback_url
     * @param string $callback_url Callback url
     * @return $this
     */
    public function setCallbackUrl($callback_url)
    {
        $this->container['callback_url'] = $callback_url;

        return $this;
    }

    /**
     * Gets filename
     * @return string
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     * @param string $filename Name of the file
     * @return $this
     */
    public function setFilename($filename)
    {
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets reliability
     * @return int
     */
    public function getReliability()
    {
        return $this->container['reliability'];
    }

    /**
     * Sets reliability
     * @param int $reliability Total reliability for all the CDNs
     * @return $this
     */
    public function setReliability($reliability)
    {
        $this->container['reliability'] = $reliability;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Softonic\StorageApiSdk\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Softonic\StorageApiSdk\ObjectSerializer::sanitizeForSerialization($this));
    }
}


