<?php
/**
 * ScanBinariesApi
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\StorageApiSdk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Softonic\StorageApiSdk\Client\Api;

use \Softonic\StorageApiSdk\Configuration;
use \Softonic\StorageApiSdk\ApiClient;
use \Softonic\StorageApiSdk\ApiException;
use \Softonic\StorageApiSdk\ObjectSerializer;

/**
 * ScanBinariesApi Class Doc Comment
 *
 * @category Class
 * @package  Softonic\StorageApiSdk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ScanBinariesApi
{

    /**
     * API Client
     * @var \Softonic\StorageApiSdk\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Softonic\StorageApiSdk\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://v1.virus-total.priv.sftapi.com.dev');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Softonic\StorageApiSdk\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Softonic\StorageApiSdk\ApiClient $apiClient set the API client
     * @return ScanBinariesApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * createScanBinary
     *
     * Creates a new ScanBinary
     *
     * @param \Softonic\StorageApiSdk\Client\Model\ScanBinary $body  (optional)
     * @return void
     * @throws \Softonic\StorageApiSdk\ApiException on non-2xx response
     */
    public function createScanBinary($body = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createScanBinaryWithHttpInfo ($body);
        return $response; 
    }


    /**
     * createScanBinaryWithHttpInfo
     *
     * Creates a new ScanBinary
     *
     * @param \Softonic\StorageApiSdk\Client\Model\ScanBinary $body  (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\StorageApiSdk\ApiException on non-2xx response
     */
    public function createScanBinaryWithHttpInfo($body = null)
    {
        
  
        // parse inputs
        $resourcePath = "/scan-binaries";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteScanBinary
     *
     * Deletes a ScanBinary
     *
     * @param string $id_scan_binary Scan UUID (required)
     * @return void
     * @throws \Softonic\StorageApiSdk\ApiException on non-2xx response
     */
    public function deleteScanBinary($id_scan_binary)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteScanBinaryWithHttpInfo ($id_scan_binary);
        return $response; 
    }


    /**
     * deleteScanBinaryWithHttpInfo
     *
     * Deletes a ScanBinary
     *
     * @param string $id_scan_binary Scan UUID (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\StorageApiSdk\ApiException on non-2xx response
     */
    public function deleteScanBinaryWithHttpInfo($id_scan_binary)
    {
        
        // verify the required parameter 'id_scan_binary' is set
        if ($id_scan_binary === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_scan_binary when calling deleteScanBinary');
        }
  
        // parse inputs
        $resourcePath = "/scan-binaries/{id_scan_binary}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id_scan_binary !== null) {
            $resourcePath = str_replace(
                "{" . "id_scan_binary" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_scan_binary),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * findScanBinary
     *
     * List of ScanBinarys
     *
     * @return \Softonic\StorageApiSdk\Client\Model\ScanBinary[]
     * @throws \Softonic\StorageApiSdk\ApiException on non-2xx response
     */
    public function findScanBinary()
    {
        list($response, $statusCode, $httpHeader) = $this->findScanBinaryWithHttpInfo ();
        return $response; 
    }


    /**
     * findScanBinaryWithHttpInfo
     *
     * List of ScanBinarys
     *
     * @return Array of \Softonic\StorageApiSdk\Client\Model\ScanBinary[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\StorageApiSdk\ApiException on non-2xx response
     */
    public function findScanBinaryWithHttpInfo()
    {
        
  
        // parse inputs
        $resourcePath = "/scan-binaries";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Softonic\StorageApiSdk\Client\Model\ScanBinary[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Softonic\StorageApiSdk\ObjectSerializer::deserialize($response, '\Softonic\StorageApiSdk\Client\Model\ScanBinary[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Softonic\StorageApiSdk\ObjectSerializer::deserialize($e->getResponseBody(), '\Softonic\StorageApiSdk\Client\Model\ScanBinary[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * readScanBinary
     *
     * Fetches a single ScanBinary
     *
     * @param string $id_scan_binary Scan UUID (required)
     * @return \Softonic\StorageApiSdk\Client\Model\ScanBinary
     * @throws \Softonic\StorageApiSdk\ApiException on non-2xx response
     */
    public function readScanBinary($id_scan_binary)
    {
        list($response, $statusCode, $httpHeader) = $this->readScanBinaryWithHttpInfo ($id_scan_binary);
        return $response; 
    }


    /**
     * readScanBinaryWithHttpInfo
     *
     * Fetches a single ScanBinary
     *
     * @param string $id_scan_binary Scan UUID (required)
     * @return Array of \Softonic\StorageApiSdk\Client\Model\ScanBinary, HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\StorageApiSdk\ApiException on non-2xx response
     */
    public function readScanBinaryWithHttpInfo($id_scan_binary)
    {
        
        // verify the required parameter 'id_scan_binary' is set
        if ($id_scan_binary === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_scan_binary when calling readScanBinary');
        }
  
        // parse inputs
        $resourcePath = "/scan-binaries/{id_scan_binary}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id_scan_binary !== null) {
            $resourcePath = str_replace(
                "{" . "id_scan_binary" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_scan_binary),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Softonic\StorageApiSdk\Client\Model\ScanBinary'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Softonic\StorageApiSdk\ObjectSerializer::deserialize($response, '\Softonic\StorageApiSdk\Client\Model\ScanBinary', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Softonic\StorageApiSdk\ObjectSerializer::deserialize($e->getResponseBody(), '\Softonic\StorageApiSdk\Client\Model\ScanBinary', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * updateScanBinary
     *
     * Partially updates a ScanBinary
     *
     * @param string $id_scan_binary Scan UUID (required)
     * @param \Softonic\StorageApiSdk\Client\Model\ScanBinary $body  (optional)
     * @return void
     * @throws \Softonic\StorageApiSdk\ApiException on non-2xx response
     */
    public function updateScanBinary($id_scan_binary, $body = null)
    {
        list($response, $statusCode, $httpHeader) = $this->updateScanBinaryWithHttpInfo ($id_scan_binary, $body);
        return $response; 
    }


    /**
     * updateScanBinaryWithHttpInfo
     *
     * Partially updates a ScanBinary
     *
     * @param string $id_scan_binary Scan UUID (required)
     * @param \Softonic\StorageApiSdk\Client\Model\ScanBinary $body  (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\StorageApiSdk\ApiException on non-2xx response
     */
    public function updateScanBinaryWithHttpInfo($id_scan_binary, $body = null)
    {
        
        // verify the required parameter 'id_scan_binary' is set
        if ($id_scan_binary === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_scan_binary when calling updateScanBinary');
        }
  
        // parse inputs
        $resourcePath = "/scan-binaries/{id_scan_binary}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($id_scan_binary !== null) {
            $resourcePath = str_replace(
                "{" . "id_scan_binary" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_scan_binary),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PATCH',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
}
