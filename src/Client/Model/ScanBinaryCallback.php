<?php
/**
 * ScanBinaryCallback
 *
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\StorageApiSdk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\StorageApiSdk\Client\Model;

use \ArrayAccess;
/**
 * ScanBinaryCallback Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Softonic\StorageApiSdk
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ScanBinaryCallback implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id_scan_binary' => 'string',
        'scan_id' => 'string',
        'sha1' => 'string',
        'sha256' => 'string',
        'md5' => 'string',
        'scan_date' => '\DateTime',
        'total' => 'int',
        'positives' => 'int',
        'scans' => 'string[][]'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id_scan_binary' => 'id_scan_binary',
        'scan_id' => 'scan_id',
        'sha1' => 'sha1',
        'sha256' => 'sha256',
        'md5' => 'md5',
        'scan_date' => 'scan_date',
        'total' => 'total',
        'positives' => 'positives',
        'scans' => 'scans'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id_scan_binary' => 'setIdScanBinary',
        'scan_id' => 'setScanId',
        'sha1' => 'setSha1',
        'sha256' => 'setSha256',
        'md5' => 'setMd5',
        'scan_date' => 'setScanDate',
        'total' => 'setTotal',
        'positives' => 'setPositives',
        'scans' => 'setScans'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id_scan_binary' => 'getIdScanBinary',
        'scan_id' => 'getScanId',
        'sha1' => 'getSha1',
        'sha256' => 'getSha256',
        'md5' => 'getMd5',
        'scan_date' => 'getScanDate',
        'total' => 'getTotal',
        'positives' => 'getPositives',
        'scans' => 'getScans'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id_scan_binary Scan UUID
      * @var string
      */
    protected $id_scan_binary;
    
    /**
      * $scan_id VirusTotal API scan identifier (sha256-timestamp)
      * @var string
      */
    protected $scan_id;
    
    /**
      * $sha1 SHA-1 hash of the file
      * @var string
      */
    protected $sha1;
    
    /**
      * $sha256 SHA-256 hash of the file
      * @var string
      */
    protected $sha256;
    
    /**
      * $md5 MD5 hash of the file
      * @var string
      */
    protected $md5;
    
    /**
      * $scan_date Date and time when the scan was done
      * @var \DateTime
      */
    protected $scan_date;
    
    /**
      * $total Total of antivirus that scanned the file
      * @var int
      */
    protected $total;
    
    /**
      * $positives Number of antivirus that gave a positive when scanning the file
      * @var int
      */
    protected $positives;
    
    /**
      * $scans Scan result for each antivirus
      * @var string[][]
      */
    protected $scans;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id_scan_binary = $data["id_scan_binary"];
            $this->scan_id = $data["scan_id"];
            $this->sha1 = $data["sha1"];
            $this->sha256 = $data["sha256"];
            $this->md5 = $data["md5"];
            $this->scan_date = $data["scan_date"];
            $this->total = $data["total"];
            $this->positives = $data["positives"];
            $this->scans = $data["scans"];
        }
    }
    
    /**
     * Gets id_scan_binary
     * @return string
     */
    public function getIdScanBinary()
    {
        return $this->id_scan_binary;
    }
  
    /**
     * Sets id_scan_binary
     * @param string $id_scan_binary Scan UUID
     * @return $this
     */
    public function setIdScanBinary($id_scan_binary)
    {
        
        $this->id_scan_binary = $id_scan_binary;
        return $this;
    }
    
    /**
     * Gets scan_id
     * @return string
     */
    public function getScanId()
    {
        return $this->scan_id;
    }
  
    /**
     * Sets scan_id
     * @param string $scan_id VirusTotal API scan identifier (sha256-timestamp)
     * @return $this
     */
    public function setScanId($scan_id)
    {
        
        $this->scan_id = $scan_id;
        return $this;
    }
    
    /**
     * Gets sha1
     * @return string
     */
    public function getSha1()
    {
        return $this->sha1;
    }
  
    /**
     * Sets sha1
     * @param string $sha1 SHA-1 hash of the file
     * @return $this
     */
    public function setSha1($sha1)
    {
        
        $this->sha1 = $sha1;
        return $this;
    }
    
    /**
     * Gets sha256
     * @return string
     */
    public function getSha256()
    {
        return $this->sha256;
    }
  
    /**
     * Sets sha256
     * @param string $sha256 SHA-256 hash of the file
     * @return $this
     */
    public function setSha256($sha256)
    {
        
        $this->sha256 = $sha256;
        return $this;
    }
    
    /**
     * Gets md5
     * @return string
     */
    public function getMd5()
    {
        return $this->md5;
    }
  
    /**
     * Sets md5
     * @param string $md5 MD5 hash of the file
     * @return $this
     */
    public function setMd5($md5)
    {
        
        $this->md5 = $md5;
        return $this;
    }
    
    /**
     * Gets scan_date
     * @return \DateTime
     */
    public function getScanDate()
    {
        return $this->scan_date;
    }
  
    /**
     * Sets scan_date
     * @param \DateTime $scan_date Date and time when the scan was done
     * @return $this
     */
    public function setScanDate($scan_date)
    {
        
        $this->scan_date = $scan_date;
        return $this;
    }
    
    /**
     * Gets total
     * @return int
     */
    public function getTotal()
    {
        return $this->total;
    }
  
    /**
     * Sets total
     * @param int $total Total of antivirus that scanned the file
     * @return $this
     */
    public function setTotal($total)
    {
        
        $this->total = $total;
        return $this;
    }
    
    /**
     * Gets positives
     * @return int
     */
    public function getPositives()
    {
        return $this->positives;
    }
  
    /**
     * Sets positives
     * @param int $positives Number of antivirus that gave a positive when scanning the file
     * @return $this
     */
    public function setPositives($positives)
    {
        
        $this->positives = $positives;
        return $this;
    }
    
    /**
     * Gets scans
     * @return string[][]
     */
    public function getScans()
    {
        return $this->scans;
    }
  
    /**
     * Sets scans
     * @param string[][] $scans Scan result for each antivirus
     * @return $this
     */
    public function setScans($scans)
    {
        
        $this->scans = $scans;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Softonic\StorageApiSdk\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Softonic\StorageApiSdk\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
