<?php
/**
 * UploadRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\StorageApiSdk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\StorageApiSdk\Client\Model;

use \ArrayAccess;
/**
 * UploadRequest Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Softonic\StorageApiSdk
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UploadRequest implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id_upload_requests' => 'int',
        'id_files' => 'string',
        'status' => 'string',
        'remaining_attempts' => 'int',
        'last_upload_error_message' => 'string',
        'download_url' => 'string',
        'file_type' => 'string',
        'callback_url' => 'string',
        'filename' => 'string',
        'reliability' => 'int'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id_upload_requests' => 'id_upload_requests',
        'id_files' => 'id_files',
        'status' => 'status',
        'remaining_attempts' => 'remaining_attempts',
        'last_upload_error_message' => 'last_upload_error_message',
        'download_url' => 'download_url',
        'file_type' => 'file_type',
        'callback_url' => 'callback_url',
        'filename' => 'filename',
        'reliability' => 'reliability'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id_upload_requests' => 'setIdUploadRequests',
        'id_files' => 'setIdFiles',
        'status' => 'setStatus',
        'remaining_attempts' => 'setRemainingAttempts',
        'last_upload_error_message' => 'setLastUploadErrorMessage',
        'download_url' => 'setDownloadUrl',
        'file_type' => 'setFileType',
        'callback_url' => 'setCallbackUrl',
        'filename' => 'setFilename',
        'reliability' => 'setReliability'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id_upload_requests' => 'getIdUploadRequests',
        'id_files' => 'getIdFiles',
        'status' => 'getStatus',
        'remaining_attempts' => 'getRemainingAttempts',
        'last_upload_error_message' => 'getLastUploadErrorMessage',
        'download_url' => 'getDownloadUrl',
        'file_type' => 'getFileType',
        'callback_url' => 'getCallbackUrl',
        'filename' => 'getFilename',
        'reliability' => 'getReliability'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id_upload_requests Upload Request ID
      * @var int
      */
    protected $id_upload_requests;
    
    /**
      * $id_files SHA-1 hash of the file content
      * @var string
      */
    protected $id_files;
    
    /**
      * $status Status of the upload request
      * @var string
      */
    protected $status;
    
    /**
      * $remaining_attempts Number of remaining attempts to fetch a file from the url
      * @var int
      */
    protected $remaining_attempts;
    
    /**
      * $last_upload_error_message Error message of the last upload resulting on error
      * @var string
      */
    protected $last_upload_error_message;
    
    /**
      * $download_url Download url
      * @var string
      */
    protected $download_url;
    
    /**
      * $file_type File type
      * @var string
      */
    protected $file_type;
    
    /**
      * $callback_url Callback url
      * @var string
      */
    protected $callback_url;
    
    /**
      * $filename Name of the file
      * @var string
      */
    protected $filename;
    
    /**
      * $reliability Total reliability for all the CDNs
      * @var int
      */
    protected $reliability;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id_upload_requests = $data["id_upload_requests"];
            $this->id_files = $data["id_files"];
            $this->status = $data["status"];
            $this->remaining_attempts = $data["remaining_attempts"];
            $this->last_upload_error_message = $data["last_upload_error_message"];
            $this->download_url = $data["download_url"];
            $this->file_type = $data["file_type"];
            $this->callback_url = $data["callback_url"];
            $this->filename = $data["filename"];
            $this->reliability = $data["reliability"];
        }
    }
    
    /**
     * Gets id_upload_requests
     * @return int
     */
    public function getIdUploadRequests()
    {
        return $this->id_upload_requests;
    }
  
    /**
     * Sets id_upload_requests
     * @param int $id_upload_requests Upload Request ID
     * @return $this
     */
    public function setIdUploadRequests($id_upload_requests)
    {
        
        $this->id_upload_requests = $id_upload_requests;
        return $this;
    }
    
    /**
     * Gets id_files
     * @return string
     */
    public function getIdFiles()
    {
        return $this->id_files;
    }
  
    /**
     * Sets id_files
     * @param string $id_files SHA-1 hash of the file content
     * @return $this
     */
    public function setIdFiles($id_files)
    {
        
        $this->id_files = $id_files;
        return $this;
    }
    
    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param string $status Status of the upload request
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array("queued", "fetching", "fetched", "uploading", "uploaded", "error", "partial_error");
        if (!in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'queued', 'fetching', 'fetched', 'uploading', 'uploaded', 'error', 'partial_error'");
        }
        $this->status = $status;
        return $this;
    }
    
    /**
     * Gets remaining_attempts
     * @return int
     */
    public function getRemainingAttempts()
    {
        return $this->remaining_attempts;
    }
  
    /**
     * Sets remaining_attempts
     * @param int $remaining_attempts Number of remaining attempts to fetch a file from the url
     * @return $this
     */
    public function setRemainingAttempts($remaining_attempts)
    {
        
        $this->remaining_attempts = $remaining_attempts;
        return $this;
    }
    
    /**
     * Gets last_upload_error_message
     * @return string
     */
    public function getLastUploadErrorMessage()
    {
        return $this->last_upload_error_message;
    }
  
    /**
     * Sets last_upload_error_message
     * @param string $last_upload_error_message Error message of the last upload resulting on error
     * @return $this
     */
    public function setLastUploadErrorMessage($last_upload_error_message)
    {
        
        $this->last_upload_error_message = $last_upload_error_message;
        return $this;
    }
    
    /**
     * Gets download_url
     * @return string
     */
    public function getDownloadUrl()
    {
        return $this->download_url;
    }
  
    /**
     * Sets download_url
     * @param string $download_url Download url
     * @return $this
     */
    public function setDownloadUrl($download_url)
    {
        
        $this->download_url = $download_url;
        return $this;
    }
    
    /**
     * Gets file_type
     * @return string
     */
    public function getFileType()
    {
        return $this->file_type;
    }
  
    /**
     * Sets file_type
     * @param string $file_type File type
     * @return $this
     */
    public function setFileType($file_type)
    {
        $allowed_values = array("program", "program_add_new_cdn", "program_staging", "program_integration", "program_development", "images", "images_staging", "images_integration", "images_development", "rpm", "report");
        if (!in_array($file_type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'file_type', must be one of 'program', 'program_add_new_cdn', 'program_staging', 'program_integration', 'program_development', 'images', 'images_staging', 'images_integration', 'images_development', 'rpm', 'report'");
        }
        $this->file_type = $file_type;
        return $this;
    }
    
    /**
     * Gets callback_url
     * @return string
     */
    public function getCallbackUrl()
    {
        return $this->callback_url;
    }
  
    /**
     * Sets callback_url
     * @param string $callback_url Callback url
     * @return $this
     */
    public function setCallbackUrl($callback_url)
    {
        
        $this->callback_url = $callback_url;
        return $this;
    }
    
    /**
     * Gets filename
     * @return string
     */
    public function getFilename()
    {
        return $this->filename;
    }
  
    /**
     * Sets filename
     * @param string $filename Name of the file
     * @return $this
     */
    public function setFilename($filename)
    {
        
        $this->filename = $filename;
        return $this;
    }
    
    /**
     * Gets reliability
     * @return int
     */
    public function getReliability()
    {
        return $this->reliability;
    }
  
    /**
     * Sets reliability
     * @param int $reliability Total reliability for all the CDNs
     * @return $this
     */
    public function setReliability($reliability)
    {
        
        $this->reliability = $reliability;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Softonic\StorageApiSdk\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Softonic\StorageApiSdk\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
