<?php
/**
 * UploadRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\StorageApiSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storage API
 *
 * Saves binary files in CDN providers for allowing later downloads
 *
 * OpenAPI spec version: 2.44.0
 * Contact: admin@softonic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\StorageApiSdk\Client\Model;

use \ArrayAccess;
use \JsonSerializable;
use \Softonic\StorageApiSdk\ObjectSerializer;

/**
 * UploadRequest Class Doc Comment
 *
 * @category Class
 * @package  Softonic\StorageApiSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UploadRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    const GET_ALL_ATTRIBUTES = true;

    const GET_SET_ATTRIBUTES = false;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UploadRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id_upload_requests' => 'int',
        'id_files' => 'string',
        'status' => 'string',
        'remaining_attempts' => 'int',
        'last_upload_error_message' => 'string',
        'download_url' => 'string',
        'file_type' => 'string',
        'callback_url' => 'string',
        'filename' => 'string',
        'reliability' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id_upload_requests' => null,
        'id_files' => null,
        'status' => null,
        'remaining_attempts' => null,
        'last_upload_error_message' => null,
        'download_url' => null,
        'file_type' => null,
        'callback_url' => null,
        'filename' => null,
        'reliability' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_upload_requests' => 'id_upload_requests',
        'id_files' => 'id_files',
        'status' => 'status',
        'remaining_attempts' => 'remaining_attempts',
        'last_upload_error_message' => 'last_upload_error_message',
        'download_url' => 'download_url',
        'file_type' => 'file_type',
        'callback_url' => 'callback_url',
        'filename' => 'filename',
        'reliability' => 'reliability'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_upload_requests' => 'setIdUploadRequests',
        'id_files' => 'setIdFiles',
        'status' => 'setStatus',
        'remaining_attempts' => 'setRemainingAttempts',
        'last_upload_error_message' => 'setLastUploadErrorMessage',
        'download_url' => 'setDownloadUrl',
        'file_type' => 'setFileType',
        'callback_url' => 'setCallbackUrl',
        'filename' => 'setFilename',
        'reliability' => 'setReliability'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_upload_requests' => 'getIdUploadRequests',
        'id_files' => 'getIdFiles',
        'status' => 'getStatus',
        'remaining_attempts' => 'getRemainingAttempts',
        'last_upload_error_message' => 'getLastUploadErrorMessage',
        'download_url' => 'getDownloadUrl',
        'file_type' => 'getFileType',
        'callback_url' => 'getCallbackUrl',
        'filename' => 'getFilename',
        'reliability' => 'getReliability'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_QUEUED = 'queued';
    const STATUS_FETCHING = 'fetching';
    const STATUS_FETCHED = 'fetched';
    const STATUS_UPLOADING = 'uploading';
    const STATUS_UPLOADED = 'uploaded';
    const STATUS_ERROR = 'error';
    const STATUS_PARTIAL_ERROR = 'partial_error';
    const FILE_TYPE_PROGRAM = 'program';
    const FILE_TYPE_PROGRAM_BATCH = 'program_batch';
    const FILE_TYPE_PROGRAM_ADD_NEW_CDN = 'program_add_new_cdn';
    const FILE_TYPE_PROGRAM_STAGING = 'program_staging';
    const FILE_TYPE_PROGRAM_INTEGRATION = 'program_integration';
    const FILE_TYPE_PROGRAM_DEVELOPMENT = 'program_development';
    const FILE_TYPE_IMAGES = 'images';
    const FILE_TYPE_IMAGES_STAGING = 'images_staging';
    const FILE_TYPE_IMAGES_INTEGRATION = 'images_integration';
    const FILE_TYPE_IMAGES_DEVELOPMENT = 'images_development';
    const FILE_TYPE_RPM = 'rpm';
    const FILE_TYPE_REPORT = 'report';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_QUEUED,
            self::STATUS_FETCHING,
            self::STATUS_FETCHED,
            self::STATUS_UPLOADING,
            self::STATUS_UPLOADED,
            self::STATUS_ERROR,
            self::STATUS_PARTIAL_ERROR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFileTypeAllowableValues()
    {
        return [
            self::FILE_TYPE_PROGRAM,
            self::FILE_TYPE_PROGRAM_BATCH,
            self::FILE_TYPE_PROGRAM_ADD_NEW_CDN,
            self::FILE_TYPE_PROGRAM_STAGING,
            self::FILE_TYPE_PROGRAM_INTEGRATION,
            self::FILE_TYPE_PROGRAM_DEVELOPMENT,
            self::FILE_TYPE_IMAGES,
            self::FILE_TYPE_IMAGES_STAGING,
            self::FILE_TYPE_IMAGES_INTEGRATION,
            self::FILE_TYPE_IMAGES_DEVELOPMENT,
            self::FILE_TYPE_RPM,
            self::FILE_TYPE_REPORT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = [])
    {
        array_key_exists('id_upload_requests', $data) && $this->container['id_upload_requests'] = $data['id_upload_requests'];
        array_key_exists('id_files', $data) && $this->container['id_files'] = $data['id_files'];
        array_key_exists('status', $data) && $this->container['status'] = $data['status'];
        array_key_exists('remaining_attempts', $data) && $this->container['remaining_attempts'] = $data['remaining_attempts'];
        array_key_exists('last_upload_error_message', $data) && $this->container['last_upload_error_message'] = $data['last_upload_error_message'];
        array_key_exists('download_url', $data) && $this->container['download_url'] = $data['download_url'];
        array_key_exists('file_type', $data) && $this->container['file_type'] = $data['file_type'];
        array_key_exists('callback_url', $data) && $this->container['callback_url'] = $data['callback_url'];
        array_key_exists('filename', $data) && $this->container['filename'] = $data['filename'];
        array_key_exists('reliability', $data) && $this->container['reliability'] = $data['reliability'];
    }

    /**
     * Returns true if all attributes are set. False otherwise.
     *
     * @return bool
     */
    public function hasAllAttributesSet()
    {
        return count($this->container) === count(self::$attributeMap);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (($this->container['id_files'] !== null) && (strlen($this->container['id_files']) > 40)) {
            $invalidProperties[] = "invalid value for 'id_files', the character length must be smaller than or equal to 40.";
        }

        if (($this->container['id_files'] !== null) && (strlen($this->container['id_files']) < 40)) {
            $invalidProperties[] = "invalid value for 'id_files', the character length must be bigger than or equal to 40.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (($this->container['status'] !== null) && !in_array($this->container['status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['download_url'] === null) {
            $invalidProperties[] = "'download_url' can't be null";
        }
        if ($this->container['file_type'] === null) {
            $invalidProperties[] = "'file_type' can't be null";
        }
        $allowedValues = $this->getFileTypeAllowableValues();
        if (!in_array($this->container['file_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'file_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['callback_url'] === null) {
            $invalidProperties[] = "'callback_url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model ensuring the required ones are set
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->offsetGet('download_url') === null) {
            return false;
        }
        if ($this->offsetGet('file_type') === null) {
            return false;
        }
        if ($this->offsetGet('callback_url') === null) {
            return false;
        }

        return $this->validProperties();
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function validProperties()
    {

        if (array_key_exists('id_files', $this->container) && ($this->container['id_files'] !== null) && (strlen($this->container['id_files']) > 40)) {
            return false;
        }
        if (array_key_exists('id_files', $this->container) && ($this->container['id_files'] !== null) && (strlen($this->container['id_files']) < 40)) {
            return false;
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (array_key_exists('status', $this->container) && ($this->container['status'] !== null) && !in_array($this->container['status'], $allowedValues)) {
            return false;
        }
        if (array_key_exists('download_url', $this->container) && $this->container['download_url'] === null) {
            return false;
        }
        if (array_key_exists('file_type', $this->container) && $this->container['file_type'] === null) {
            return false;
        }
        $allowedValues = $this->getFileTypeAllowableValues();
        if (array_key_exists('file_type', $this->container) && !in_array($this->container['file_type'], $allowedValues)) {
            return false;
        }
        if (array_key_exists('callback_url', $this->container) && $this->container['callback_url'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id_upload_requests
     *
     * @return int
     */
    public function getIdUploadRequests()
    {
        return array_key_exists('id_upload_requests', $this->container) ? $this->container['id_upload_requests'] : null;
    }

    /**
     * Sets id_upload_requests
     *
     * @param int $id_upload_requests Upload Request ID
     *
     * @return $this
     */
    public function setIdUploadRequests($id_upload_requests)
    {
        $this->container['id_upload_requests'] = $id_upload_requests;

        return $this;
    }

    /**
     * Gets id_files
     *
     * @return string
     */
    public function getIdFiles()
    {
        return array_key_exists('id_files', $this->container) ? $this->container['id_files'] : null;
    }

    /**
     * Sets id_files
     *
     * @param string $id_files SHA-1 hash of the file content
     *
     * @return $this
     */
    public function setIdFiles($id_files)
    {
        if (($id_files !== null) && (strlen($id_files) > 40)) {
            throw new \InvalidArgumentException('invalid length for $id_files when calling UploadRequest., must be smaller than or equal to 40.');
        }
        if (($id_files !== null) && (strlen($id_files) < 40)) {
            throw new \InvalidArgumentException('invalid length for $id_files when calling UploadRequest., must be bigger than or equal to 40.');
        }

        $this->container['id_files'] = $id_files;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return array_key_exists('status', $this->container) ? $this->container['status'] : null;
    }

    /**
     * Sets status
     *
     * @param string $status Status of the upload request
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (($status !== null) && !in_array($status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets remaining_attempts
     *
     * @return int
     */
    public function getRemainingAttempts()
    {
        return array_key_exists('remaining_attempts', $this->container) ? $this->container['remaining_attempts'] : null;
    }

    /**
     * Sets remaining_attempts
     *
     * @param int $remaining_attempts Number of remaining attempts to fetch a file from the url
     *
     * @return $this
     */
    public function setRemainingAttempts($remaining_attempts)
    {
        $this->container['remaining_attempts'] = $remaining_attempts;

        return $this;
    }

    /**
     * Gets last_upload_error_message
     *
     * @return string
     */
    public function getLastUploadErrorMessage()
    {
        return array_key_exists('last_upload_error_message', $this->container) ? $this->container['last_upload_error_message'] : null;
    }

    /**
     * Sets last_upload_error_message
     *
     * @param string $last_upload_error_message Error message of the last upload resulting on error
     *
     * @return $this
     */
    public function setLastUploadErrorMessage($last_upload_error_message)
    {
        $this->container['last_upload_error_message'] = $last_upload_error_message;

        return $this;
    }

    /**
     * Gets download_url
     *
     * @return string
     */
    public function getDownloadUrl()
    {
        return array_key_exists('download_url', $this->container) ? $this->container['download_url'] : null;
    }

    /**
     * Sets download_url
     *
     * @param string $download_url Download url
     *
     * @return $this
     */
    public function setDownloadUrl($download_url)
    {
        $this->container['download_url'] = $download_url;

        return $this;
    }

    /**
     * Gets file_type
     *
     * @return string
     */
    public function getFileType()
    {
        return array_key_exists('file_type', $this->container) ? $this->container['file_type'] : null;
    }

    /**
     * Sets file_type
     *
     * @param string $file_type File type
     *
     * @return $this
     */
    public function setFileType($file_type)
    {
        $allowedValues = $this->getFileTypeAllowableValues();
        if (!in_array($file_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'file_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['file_type'] = $file_type;

        return $this;
    }

    /**
     * Gets callback_url
     *
     * @return string
     */
    public function getCallbackUrl()
    {
        return array_key_exists('callback_url', $this->container) ? $this->container['callback_url'] : null;
    }

    /**
     * Sets callback_url
     *
     * @param string $callback_url Callback url
     *
     * @return $this
     */
    public function setCallbackUrl($callback_url)
    {
        $this->container['callback_url'] = $callback_url;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string
     */
    public function getFilename()
    {
        return array_key_exists('filename', $this->container) ? $this->container['filename'] : null;
    }

    /**
     * Sets filename
     *
     * @param string $filename Name of the file
     *
     * @return $this
     */
    public function setFilename($filename)
    {
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets reliability
     *
     * @return int
     */
    public function getReliability()
    {
        return array_key_exists('reliability', $this->container) ? $this->container['reliability'] : null;
    }

    /**
     * Sets reliability
     *
     * @param int $reliability Total reliability for all the CDNs
     *
     * @return $this
     */
    public function setReliability($reliability)
    {
        $this->container['reliability'] = $reliability;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return array_key_exists($offset, $this->container);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Returns data which can be serialized by json_encode()
     *
     * @return mixed[]
     */
    public function jsonSerialize()
    {
        return $this->container;
    }

    /**
     * Returns data as array.
     *
     * @param bool $getAllAttributes Should convert with all attributes or just the set ones?
     *
     * @return array
     */
    public function toArray($getAllAttributes = self::GET_SET_ATTRIBUTES)
    {
        if (!$getAllAttributes) {
            return $this->container;
        }

        $data = [];
        $data['id_upload_requests'] = $this->getIdUploadRequests();
        $data['id_files'] = $this->getIdFiles();
        $data['status'] = $this->getStatus();
        $data['remaining_attempts'] = $this->getRemainingAttempts();
        $data['last_upload_error_message'] = $this->getLastUploadErrorMessage();
        $data['download_url'] = $this->getDownloadUrl();
        $data['file_type'] = $this->getFileType();
        $data['callback_url'] = $this->getCallbackUrl();
        $data['filename'] = $this->getFilename();
        $data['reliability'] = $this->getReliability();

        return $data;
    }
}


