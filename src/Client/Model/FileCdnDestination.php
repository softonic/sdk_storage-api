<?php
/**
 * FileCdnDestination
 *
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\StorageApiSdk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\StorageApiSdk\Client\Model;

use \ArrayAccess;
/**
 * FileCdnDestination Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Softonic\StorageApiSdk
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FileCdnDestination implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id_files' => 'string',
        'id_cdn_destinations' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id_files' => 'id_files',
        'id_cdn_destinations' => 'id_cdn_destinations'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id_files' => 'setIdFiles',
        'id_cdn_destinations' => 'setIdCdnDestinations'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id_files' => 'getIdFiles',
        'id_cdn_destinations' => 'getIdCdnDestinations'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id_files SHA-1 hash of the file
      * @var string
      */
    protected $id_files;
    
    /**
      * $id_cdn_destinations CDN destination where the file is uploaded
      * @var string
      */
    protected $id_cdn_destinations;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id_files = $data["id_files"];
            $this->id_cdn_destinations = $data["id_cdn_destinations"];
        }
    }
    
    /**
     * Gets id_files
     * @return string
     */
    public function getIdFiles()
    {
        return $this->id_files;
    }
  
    /**
     * Sets id_files
     * @param string $id_files SHA-1 hash of the file
     * @return $this
     */
    public function setIdFiles($id_files)
    {
        
        $this->id_files = $id_files;
        return $this;
    }
    
    /**
     * Gets id_cdn_destinations
     * @return string
     */
    public function getIdCdnDestinations()
    {
        return $this->id_cdn_destinations;
    }
  
    /**
     * Sets id_cdn_destinations
     * @param string $id_cdn_destinations CDN destination where the file is uploaded
     * @return $this
     */
    public function setIdCdnDestinations($id_cdn_destinations)
    {
        $allowed_values = array("program_private", "program_private_staging", "program_private_integration", "program_private_development", "program_private_add_new_cdn", "images_public", "images_public_staging", "images_public_integration", "images_public_development", "rpm_protected", "reports_public");
        if (!in_array($id_cdn_destinations, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'id_cdn_destinations', must be one of 'program_private', 'program_private_staging', 'program_private_integration', 'program_private_development', 'program_private_add_new_cdn', 'images_public', 'images_public_staging', 'images_public_integration', 'images_public_development', 'rpm_protected', 'reports_public'");
        }
        $this->id_cdn_destinations = $id_cdn_destinations;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Softonic\StorageApiSdk\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Softonic\StorageApiSdk\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
