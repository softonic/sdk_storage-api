<?php
/**
 * ScanBinary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\StorageApiSdk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\StorageApiSdk\Client\Model;

use \ArrayAccess;
/**
 * ScanBinary Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Softonic\StorageApiSdk
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ScanBinary implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id_scan_binary' => 'string',
        'url' => 'string',
        'vtapi_scan_id' => 'string',
        'result' => 'string',
        'status' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id_scan_binary' => 'id_scan_binary',
        'url' => 'url',
        'vtapi_scan_id' => 'vtapi_scan_id',
        'result' => 'result',
        'status' => 'status'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id_scan_binary' => 'setIdScanBinary',
        'url' => 'setUrl',
        'vtapi_scan_id' => 'setVtapiScanId',
        'result' => 'setResult',
        'status' => 'setStatus'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id_scan_binary' => 'getIdScanBinary',
        'url' => 'getUrl',
        'vtapi_scan_id' => 'getVtapiScanId',
        'result' => 'getResult',
        'status' => 'getStatus'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $id_scan_binary Scan UUID
      * @var string
      */
    protected $id_scan_binary;
    
    /**
      * $url Url to scan
      * @var string
      */
    protected $url;
    
    /**
      * $vtapi_scan_id VirusTotal API scan identifier (sha256-timestamp)
      * @var string
      */
    protected $vtapi_scan_id;
    
    /**
      * $result Result in JSON
      * @var string
      */
    protected $result;
    
    /**
      * $status Scanned url status
      * @var string
      */
    protected $status;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->id_scan_binary = $data["id_scan_binary"];
            $this->url = $data["url"];
            $this->vtapi_scan_id = $data["vtapi_scan_id"];
            $this->result = $data["result"];
            $this->status = $data["status"];
        }
    }
    
    /**
     * Gets id_scan_binary
     * @return string
     */
    public function getIdScanBinary()
    {
        return $this->id_scan_binary;
    }
  
    /**
     * Sets id_scan_binary
     * @param string $id_scan_binary Scan UUID
     * @return $this
     */
    public function setIdScanBinary($id_scan_binary)
    {
        
        $this->id_scan_binary = $id_scan_binary;
        return $this;
    }
    
    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }
  
    /**
     * Sets url
     * @param string $url Url to scan
     * @return $this
     */
    public function setUrl($url)
    {
        
        $this->url = $url;
        return $this;
    }
    
    /**
     * Gets vtapi_scan_id
     * @return string
     */
    public function getVtapiScanId()
    {
        return $this->vtapi_scan_id;
    }
  
    /**
     * Sets vtapi_scan_id
     * @param string $vtapi_scan_id VirusTotal API scan identifier (sha256-timestamp)
     * @return $this
     */
    public function setVtapiScanId($vtapi_scan_id)
    {
        
        $this->vtapi_scan_id = $vtapi_scan_id;
        return $this;
    }
    
    /**
     * Gets result
     * @return string
     */
    public function getResult()
    {
        return $this->result;
    }
  
    /**
     * Sets result
     * @param string $result Result in JSON
     * @return $this
     */
    public function setResult($result)
    {
        
        $this->result = $result;
        return $this;
    }
    
    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param string $status Scanned url status
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array("scanning", "no-result", "clean", "warning", "blocked", "error");
        if (!in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'scanning', 'no-result', 'clean', 'warning', 'blocked', 'error'");
        }
        $this->status = $status;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Softonic\StorageApiSdk\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Softonic\StorageApiSdk\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
